require('dotenv').config();
const mongoose = require('mongoose');
const fs = require('fs');
const path = require('path');
const Recipe = require('../models/Recipe');

async function migrateData() {
    try {
        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
        await mongoose.connect(process.env.MONGODB_URI, {
            useNewUrlParser: true,
            useUnifiedTopology: true
        });
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB Atlas');

        // –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
        const rawData = fs.readFileSync(path.join(__dirname, '../data.json'), 'utf8');
        const recipes = JSON.parse(rawData);

        // –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤
        await Recipe.deleteMany({});
        console.log('üóëÔ∏è –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã —É–¥–∞–ª–µ–Ω—ã');

        // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ —Ä–µ—Ü–µ–ø—Ç–æ–≤
        const typeMapping = {
            '–≥–æ—Ä—è—á–µ–µ': 'main',
            '—Å—É–ø': 'soup',
            '—Å–∞–ª–∞—Ç': 'salad',
            '–¥–µ—Å–µ—Ä—Ç': 'dessert',
            '–∑–∞–∫—É—Å–∫–∞': 'appetizer',
            '–Ω–∞–ø–∏—Ç–æ–∫': 'drink'
        };

        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
        const recipesToImport = recipes.map(recipe => {
            const { id, ...recipeData } = recipe; // –£–¥–∞–ª—è–µ–º –ø–æ–ª–µ id
            const type = recipe.type ? typeMapping[recipe.type.toLowerCase()] || 'main' : 'main';
            
            return {
                ...recipeData,
                type,
                author: '65f1f0000000000000000000', // –í—Ä–µ–º–µ–Ω–Ω—ã–π ID –∞–≤—Ç–æ—Ä–∞
                isCustom: false,
                image: recipe.image ? recipe.image.replace('./', '/') : '/assets/default.jpg' // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
            };
        });

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤
        const result = await Recipe.insertMany(recipesToImport);

        console.log(`‚ú® –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${result.length} —Ä–µ—Ü–µ–ø—Ç–æ–≤`);
        console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
        if (error.errors) {
            Object.keys(error.errors).forEach(key => {
                console.error(`–û—à–∏–±–∫–∞ –≤ –ø–æ–ª–µ ${key}:`, error.errors[key].message);
            });
        }
    } finally {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await mongoose.connection.close();
        console.log('üì° –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
    }
}

migrateData(); 